shorten_path() {
    # Define colors
    local light_blue="%F{81}" # Light blue color code
    local dark_blue="%F{blue}" # Dark blue color name
    local RESET="%f" # Reset to default color

    # Capture the current working directory
    local path="$PWD"
    
    # Initialize display_path with the path, replacing home directory with ~
    local display_path="${path/#$HOME/~}"
    
    # Determine if we're outside the home directory and need a leading slash
    local need_slash=""
    if [[ "$display_path" != "~"* ]]; then
        need_slash="/"
    fi
    
    # Split the path into an array of directories
    local -a dirs
    dirs=("${(@s:/:)display_path}")
    
    # Store the length of dirs array
    local len=${#dirs[@]}
    
    # Initialize newpath with the need_slash value, color it if outside ~
    local newpath="${need_slash:+$dark_blue/}$RESET"
    
    # Process directories except for the first (~ or outside ~) and the last one
    for (( i=1; i<$len; i++ )); do
        if [[ -n "${dirs[$i]}" ]]; then
            # Color each directory with light blue and slashes with dark blue
            newpath+="${light_blue}${dirs[$i][1,1]}$RESET"
            (( i < len - 1 )) && newpath+="${dark_blue}/$RESET" # Add slash for all but last
        fi
    done
    
    # Append the last directory without shortening, color it, no slash
    if [[ $len -gt 1 ]]; then
        newpath+="${light_blue}${dirs[len]}$RESET"
    fi
    
    echo "$newpath"
}

# Function to customize the prompt
prompt_custom() {
  # Colors
  local RESET="%f"
  local GREEN="%F{green}"
  local RED="%F{red}"
  local BLUE="%F{blue}"

  # Get the shortened path
  local PWD_PROMPT="$(shorten_path)"

  # Determine the color of the prompt character based on the last command's exit status
  local STATUS_COLOR=$GREEN
  [[ $? != 0 ]] && STATUS_COLOR=$RED

  # Check if the current directory is within a Git repository
  if git rev-parse --git-dir > /dev/null 2>&1; then
    # Get the current branch name
    local BRANCH=$(git branch --show-current)
    
    # Check for any changes including untracked files and adjust the branch color
    if [[ -n $(git status --porcelain) ]]; then
      # If there are any changes, color the branch name blue
      BRANCH="%{$BLUE%}${BRANCH}%{$RESET%}"
    fi
    
    # Append branch info to the prompt, ensuring the closing bracket and the rest remain in default color
    PWD_PROMPT="${PWD_PROMPT} [%{$RESET%}${BRANCH}]"
  fi

  # Set the prompt
  PROMPT="${PWD_PROMPT} %{$STATUS_COLOR%}‚ùØ%{$RESET%} "
}

# The rest of your .zshrc configurations...

autoload -Uz compinit
compinit

# Make autocomplete case insensitive
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

# Register the custom prompt function to be called before each prompt
precmd_functions+=("prompt_custom")

# Optional: Bind the up and down arrow keys to search the command history
bindkey '^[[A' history-beginning-search-backward
bindkey '^[[B' history-beginning-search-forward

# Bind Option-Left to move one word left
bindkey "^[b" backward-word
# Bind Option-Right to move one word right
bindkey "^[f" forward-word

# Make autocomplete case insensitive
# Make globbing and completion case insensitive
setopt NO_CASE_GLOB
setopt NOCASEGLOB

function git_push_origin_current_branch() {
    local branchname=$(git rev-parse --abbrev-ref HEAD)
    git push origin "$branchname"
}
alias gpo='git_push_origin_current_branch'

alias airdev='yak ws vscode'

{{ if eq .chezmoi.os "darwin" }}
export PATH="/opt/homebrew/bin:$PATH"
export PATH="$HOME/Dropbox/Config/bin:$PATH"
export EDITOR="code --wait"
{{ end }}
