# Define a global variable to store the last command's exit status
LAST_EXIT_STATUS=0

# A preexec function runs before each command execution.
preexec() {
  # Capture the last exit status right before the next command executes
  LAST_EXIT_STATUS=$?
}

shorten_path() {
    # Define colors
    local light_blue="%F{81}" # Light blue color code
    local dark_blue="%F{blue}" # Dark blue color name
    local RESET="%f" # Reset to default color

    # Capture the current working directory
    local path="$PWD"
    
    # Initialize display_path with the path, replacing home directory with ~
    local display_path="${path/#$HOME/~}"
    
    # Determine if we're outside the home directory and need a leading slash
    local need_slash=""
    if [[ "$display_path" != "~"* ]]; then
        need_slash="/"
    fi
    
    # Split the path into an array of directories
    local -a dirs
    dirs=("${(@s:/:)display_path}")
    
    # Store the length of dirs array
    local len=${#dirs[@]}
    
    # Initialize newpath
    local newpath=""
    
    # Special handling to ensure slash after ~ is correctly handled
    if [[ "$display_path" =~ ^~(/|$) ]]; then
        newpath="${light_blue}~$RESET"
        need_slash="$dark_blue/$RESET" # Set need_slash to dark blue slash for consistent coloring
    else
        newpath="${need_slash:+$dark_blue/}$RESET"
    fi
    
    # Process directories except for the first (~ or outside ~) and the last one
    for (( i=2; i<len; i++ )); do
        # Color each directory with light blue and slashes with dark blue
        newpath+="${light_blue}${dirs[$i][1,1]}$RESET"
        newpath+="${dark_blue}/$RESET" # Add slash for all but last
    done
    
    # Append the last directory without shortening, color it
    if [[ $len -ge 2 ]]; then
        newpath+="${light_blue}${dirs[len]}$RESET"
    fi
    
    echo "$newpath"
}

prompt_status() {
    # Define colors
    local RESET="%f"
    local GREEN="%F{green}"
    local RED="%F{red}"
    local BLUE="%F{81}" # Light blue color code for directories
    local DARK_BLUE="%F{blue}" # Dark blue color name for slashes

    # Capture the current working directory and shorten the path
    local PWD_PROMPT="$(shorten_path)"

    # Determine the color of the prompt character based on the last command's exit status
    local STATUS_COLOR="$GREEN"
    if [[ $LAST_EXIT_STATUS != 0 ]]; then
        STATUS_COLOR="$RED"
    fi

    # Append Git branch information if in a Git repository
    local GIT_BRANCH=""
    if git rev-parse --git-dir > /dev/null 2>&1; then
        local BRANCH_NAME="$(git branch --show-current)"
        if [[ -n $(git status --porcelain) ]]; then
            GIT_BRANCH=" [${DARK_BLUE}${BRANCH_NAME}${RESET}]"
        else
            GIT_BRANCH=" [${BRANCH_NAME}]"
        fi
    fi

    # Set the prompt
    PROMPT="${PWD_PROMPT}${GIT_BRANCH} %{$STATUS_COLOR%}‚ùØ%{$RESET%} "
}

# Register the custom prompt function to be called before displaying each prompt
autoload -Uz add-zsh-hook
add-zsh-hook precmd prompt_status

autoload -Uz compinit
compinit

# Optional: Bind the up and down arrow keys to search the command history
bindkey '^[[A' history-beginning-search-backward
bindkey '^[[B' history-beginning-search-forward

# Bind Option-Left to move one word left
bindkey "^[b" backward-word
# Bind Option-Right to move one word right
bindkey "^[f" forward-word

# Make autocomplete case insensitive
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

# Make globbing and completion case insensitive
setopt NO_CASE_GLOB
setopt NOCASEGLOB

function git_push_origin_current_branch() {
    local branchname=$(git rev-parse --abbrev-ref HEAD)
    git push origin "$branchname"
}
alias gpo='git_push_origin_current_branch'

alias airdev='yak ws vscode'

{{ if eq .chezmoi.os "darwin" }}
export PATH="/opt/homebrew/bin:$PATH"
export PATH="$HOME/Dropbox/Config/bin:$PATH"
export EDITOR="code --wait"
{{ end }}