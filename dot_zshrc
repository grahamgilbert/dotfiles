shorten_path() {
    # Capture the current working directory
    local path="$PWD"
    
    # Initialize display_path with the path, replacing home directory with ~
    local display_path="${path/#$HOME/~}"
    
    # Determine if we're outside the home directory and need a leading slash
    local need_slash=""
    if [[ "$display_path" != "~"* ]]; then
        need_slash="/"
    fi
    
    # Split the path into an array of directories
    local -a dirs
    dirs=("${(@s:/:)display_path}")
    
    # Store the length of dirs array
    local len=${#dirs[@]}
    
    # Initialize newpath with the need_slash value
    local newpath="$need_slash"
    
    # Process directories except for the first (~ or outside ~) and the last one
    for (( i=1; i<$len; i++ )); do
        if [[ -n "${dirs[$i]}" ]]; then
            # Shorten each directory to its first letter
            newpath+="${dirs[$i][1,1]}/"
        fi
    done
    
    # Append the last directory without shortening, unless we're at root or home
    if [[ $len -gt 1 ]]; then
        newpath+="${dirs[len]}"
    elif [[ "$need_slash" == "/" ]]; then
        # If at the filesystem root and need_slash is set, remove the trailing slash for aesthetics
        newpath="${newpath%/}"
    fi
    
    echo "$newpath"
}

# Function to customize the prompt
prompt_custom() {
  # Colors
  local RESET="%f"
  local GREEN="%F{green}"
  local RED="%F{red}"
  local BLUE="%F{blue}"

  # Get the shortened path
  local PWD_PROMPT="$(shorten_path)"

  # Determine the color of the prompt character based on the last command's exit status
  local STATUS_COLOR=$GREEN
  [[ $? != 0 ]] && STATUS_COLOR=$RED

  # Check if the current directory is within a Git repository
  if git rev-parse --git-dir > /dev/null 2>&1; then
    # Get the current branch name
    local BRANCH=$(git branch --show-current)
    # Check for uncommitted changes and adjust the branch color
    if ! git diff --quiet; then
      BRANCH="%{$BLUE%}${BRANCH}"
    fi
    # Append branch info to the prompt
    PWD_PROMPT="${PWD_PROMPT} [${BRANCH}]"
  fi

  # Set the prompt
  PROMPT="${PWD_PROMPT} %{$STATUS_COLOR%}‚ùØ%{$RESET%} "
}

autoload -Uz compinit
compinit

# Make autocomplete case insensitive
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

# Register the custom prompt function to be called before each prompt
precmd_functions+=("prompt_custom")

# Optional: Bind the up and down arrow keys to search the command history
bindkey '^[[A' history-beginning-search-backward
bindkey '^[[B' history-beginning-search-forward

# Make autocomplete case insensitive
# Make globbing and completion case insensitive
setopt NO_CASE_GLOB
setopt NOCASEGLOB

export PATH="/opt/homebrew/bin:$PATH"
export PATH="$HOME/Dropbox/Config/bin:$PATH"
